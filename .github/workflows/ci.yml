---
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: true

      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true

      - name: Run Jest tests with coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.node-version }}
          path: playwright-report/
          retention-days: 30

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for potential issues
        run: npm run lint

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets in code
        run: |
          echo "Checking for potential secrets..."
          npm run lint

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: test-results/
          retention-days: 30

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Test build process
        run: |
          # Simulate the deployment build process
          mkdir -p test-deploy
          cp index.html test-deploy/
          cp -r css test-deploy/
          cp -r js test-deploy/
          cp -r data test-deploy/
          
          # Remove performance files as done in deployment
          find test-deploy -name "PerformanceBenchmark.js" -delete
          find test-deploy -name "PerformanceDashboard.js" -delete
          
          # Verify essential files exist
          test -f test-deploy/index.html
          test -d test-deploy/css
          test -d test-deploy/js
          test -d test-deploy/data
          test -f test-deploy/data/countryData.json
          
          echo "Build validation successful"

      - name: Start test server and validate
        run: |
          cd test-deploy
          python3 -m http.server 8000 &
          SERVER_PID=$!
          sleep 3
          
          # Test if server responds
          curl -f http://localhost:8000/ > /dev/null
          curl -f http://localhost:8000/css/base.css > /dev/null
          curl -f http://localhost:8000/js/main.js > /dev/null
          curl -f http://localhost:8000/data/countryData.json > /dev/null
          
          kill $SERVER_PID
          echo "Server validation successful"

  # Combined status check for deployment dependency
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, lint, security, performance, build-validation]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.lint.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.build-validation.result }}" == "success" ]]; then
            echo "All checks passed successfully"
            exit 0
          else
            echo "Some checks failed:"
            echo "Test: ${{ needs.test.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "Performance: ${{ needs.performance.result }}"
            echo "Build Validation: ${{ needs.build-validation.result }}"
            exit 1
          fi